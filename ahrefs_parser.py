import json
import urllib.parse
import logging
import requests
import os
import sys

from anticaptchaofficial.turnstileproxyless import turnstileProxyless
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


# ==================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ====================

ANTICAPTCHA_API_KEY = os.getenv("ANTICAPTCHA_API_KEY", "YOUR_API_KEY_FROM_ANTICAPTCHA")
TURNSTILE_KEY = "0x4AAAAAAAAzi9ITzSN9xKMi"
TARGET_URL = "https://ahrefs.com/ru/traffic-checker"

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")


# ==================== –°–ü–û–í–Ü–©–ï–ù–ù–Ø –í TELEGRAM ====================

def send_telegram(msg: str) -> None:
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram —á–∞—Ç."""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logging.warning("Telegram —Ç–æ–∫–µ–Ω –∞–±–æ chat_id –Ω–µ –∑–∞–¥–∞–Ω–æ")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": msg}
    try:
        r = requests.post(url, data=payload, timeout=10)
        r.raise_for_status()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram: {e}")


# ==================== –†–Ü–®–ï–ù–ù–Ø CAPTCHA ====================

def solve_captcha() -> str:
    """–û—Ç—Ä–∏–º—É—î —Ç–æ–∫–µ–Ω Turnstile —á–µ—Ä–µ–∑ AntiCaptcha."""
    solver = turnstileProxyless()
    solver.set_verbose(1)
    solver.set_key(ANTICAPTCHA_API_KEY)
    solver.set_website_url(TARGET_URL)
    solver.set_website_key(TURNSTILE_KEY)

    token = solver.solve_and_return_solution()
    if token and token != 0:
        msg = "‚úÖ –¢–æ–∫–µ–Ω Turnstile —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ."
        logging.info(msg)
        send_telegram(msg)
        return token
    else:
        msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ AntiCaptcha: {solver.error_code}"
        logging.error(msg)
        send_telegram(msg)
        return ""


# ==================== –ó–ê–ü–ò–¢ –ß–ï–†–ï–ó SELENIUM ====================

def load_url(token: str, url_to_load: str) -> str:
    """–ó–∞–ø–∏—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ –æ—Ä–≥–∞–Ω—ñ—á–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É."""
    if not token:
        return "‚ùå –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∑–∞–ø–∏—Ç –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ."

    params = {
        'input': json.dumps({
            'captcha': token,
            "country": None,
            "mode": "subdomains",
            "protocol": None,
            "url": url_to_load
        })
    }
    encoded_params = urllib.parse.urlencode(params)
    url = f'https://ahrefs.com/v4/ftTrafficChecker?{encoded_params}'

    options = webdriver.ChromeOptions()
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument(
        "--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
        "AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/114.0.0.0 Safari/537.36"
    )

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    try:
        driver.get(url)

        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        page_data = driver.find_element(By.TAG_NAME, "body").text

        if not page_data:
            msg = "‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞."
            logging.warning(msg)
            send_telegram(msg)
            return msg

        data = json.loads(page_data)

        traffic_monthly_avg = None
        if isinstance(data, list):
            for item in data:
                if isinstance(item, dict) and "traffic" in item:
                    traffic_monthly_avg = item["traffic"].get("trafficMonthlyAvg")
                    break
        elif isinstance(data, dict) and "traffic" in data:
            traffic_monthly_avg = data["traffic"].get("trafficMonthlyAvg")

        if traffic_monthly_avg is None:
            msg = f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ trafficMonthlyAvg —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {data}"
            logging.warning(msg)
            send_telegram(msg)
            return msg

        result = f"üìä –û—Ä–≥–∞–Ω—ñ—á–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫ ({url_to_load}): {traffic_monthly_avg}"
        logging.info(result)
        send_telegram(result)
        return result

    except Exception as e:
        msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}"
        logging.error(msg)
        send_telegram(msg)
        return msg
    finally:
        driver.quit()


# ==================== –¢–û–ß–ö–ê –í–•–û–î–£ ====================

if __name__ == "__main__":
    # –±–µ—Ä–µ–º–æ –¥–æ–º–µ–Ω –∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    if len(sys.argv) > 1:
        domain = sys.argv[1]
    else:
        domain = "dou.ua"  # –¥–µ—Ñ–æ–ª—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è

    token = solve_captcha()
    if token:
        print(load_url(token, domain))
    else:
        print("‚ùå –ö–∞–ø—á—É –Ω–µ —Ä–æ–∑–≤'—è–∑–∞–Ω–æ, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
